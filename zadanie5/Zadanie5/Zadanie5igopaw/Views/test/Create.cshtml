@model Zadanie5.Models.KlienciViewModel

@{
    ViewData["Title"] = "Dodaj Klienta";
    var errormsg = TempData["errorMassage"]?.ToString();
}

<h3>@ViewData["Title"]</h3>
<hr />
@if (!string.IsNullOrWhiteSpace(errormsg))
{
    <div class="alert alert-danger">
        <strong>Błąd! </strong>@errormsg
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@using (Html.BeginForm("Create", "test", FormMethod.Post, new { autocomplete = "off" }))
{
    <div class="mb-3">
        <label class="form-label">Imię</label>
        <input asp-for="Name" class="form-control" required />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label class="form-label">Nazwisko</label>
        <input asp-for="Surname" class="form-control" required />
        <span asp-validation-for="Surname" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label class="form-label">PESEL</label>
        <input asp-for="PESEL" class="form-control" required pattern="\d{11}" title="PESEL musi mieć 11 cyfr" />
        <span id="peselError" class="text-danger"></span>
        <span asp-validation-for="PESEL" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label class="form-label">Rok urodzenia</label>
        <input type="number" asp-for="BirthYear" class="form-control" readonly />

    </div>

    <div class="mb-3">
        <label class="form-label">Płeć</label>
        <input asp-for="Plec" class="form-control" readonly />

    </div>

    <div class="d-grid">
        <button type="submit" class="btn btn-primary">Potwierdź</button>
    </div>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        function extractYearFromPesel(pesel) {
            if (!/^\d{11}$/.test(pesel)) return null;
            let year = parseInt(pesel.substr(0, 2), 10);
            let month = parseInt(pesel.substr(2, 2), 10);
            let century = 1900;

            if (month > 80) { century = 1800; month -= 80; }
            else if (month > 60) { century = 2200; month -= 60; }
            else if (month > 40) { century = 2100; month -= 40; }
            else if (month > 20) { century = 2000; month -= 20; }

            return century + year;
        }

        function extractGenderFromPesel(pesel) {
            if (!/^\d{11}$/.test(pesel)) return null;
            const genderDigit = parseInt(pesel.charAt(9), 10);
            return genderDigit % 2 === 0 ? 0 : 1;
        }

        function validatePeselChecksum(pesel) {
            if (!/^\d{11}$/.test(pesel)) return false;
            const weights = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3];
            let sum = 0;
            for (let i = 0; i < weights.length; i++) {
                sum += weights[i] * parseInt(pesel.charAt(i), 10);
            }
            const control = (10 - (sum % 10)) % 10;
            return control === parseInt(pesel.charAt(10), 10);
        }

        document.addEventListener("DOMContentLoaded", function () {
            const peselInput = document.querySelector("[name='PESEL']");
            const birthYearInput = document.querySelector("[name='BirthYear']");
            const genderInput = document.querySelector("[name='Plec']");
            const peselError = document.getElementById("peselError");
            const form = peselInput.closest('form');

            peselInput.addEventListener("input", function () {
                const pesel = peselInput.value;
                // automatyczne uzupełnienie
                const year = extractYearFromPesel(pesel);
                if (year !== null) birthYearInput.value = year;
                const gender = extractGenderFromPesel(pesel);
                if (gender !== null) genderInput.value = gender;

                // walidacja kontrolnej cyfry
                if (pesel.length === 11) {
                    if (!validatePeselChecksum(pesel)) {
                        peselError.textContent = "Nieprawidłowy PESEL (błąd sumy kontrolnej)";
                        peselInput.setCustomValidity("Invalid field.");
                    } else {
                        peselError.textContent = "";
                        peselInput.setCustomValidity("");
                    }
                } else {
                    peselError.textContent = "";
                    peselInput.setCustomValidity("");
                }
            });

            // dodatkowo przed wysłaniem formularza
            form.addEventListener('submit', function (e) {
                if (!validatePeselChecksum(peselInput.value)) {
                    e.preventDefault();
                    peselError.textContent = "Nieprawidłowy PESEL, nie można wysłać formularza.";
                }
            });
        });
    </script>
}
